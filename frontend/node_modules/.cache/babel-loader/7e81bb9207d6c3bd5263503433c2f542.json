{"ast":null,"code":"import Config from \"backend/config.json\";\nimport Axios from \"axios\";\n/**\n * We use axios to create REST calls to our backend\n *\n * We have provided the login rest call for your\n * reference to build other rest calls with.\n *\n * This is an async function. Which means calling this function requires that\n * you \"chain\" it with a .then() function call.\n * <br>\n * What this means is when the function is called it will essentially do it \"in\n * another thread\" and when the action is done being executed it will do\n * whatever the logic in your \".then()\" function you chained to it\n * @example\n * login(request)\n * .then(response => alert(JSON.stringify(response.data, null, 2)));\n */\n\nexport async function login(loginRequest) {\n  const requestBody = {\n    email: loginRequest.email,\n    password: loginRequest.password\n  };\n  const options = {\n    method: \"POST\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.baseUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.idm.login,\n    // Path of URL (\"/login\")\n    data: requestBody // Data to send in Body (The RequestBody to send)\n\n  };\n  return Axios.request(options);\n}\nexport async function registerUser(registerRequest) {\n  const requestBody = {\n    email: registerRequest.email,\n    password: registerRequest.password\n  };\n  const options = {\n    method: \"POST\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.baseUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.idm.register,\n    // Path of URL (\"/register\")\n    data: requestBody // Data to send in Body (The RequestBody to send)\n\n  };\n  return Axios.request(options);\n}\nexport async function searchMovies(queryParams, accessToken) {\n  const options = {\n    method: \"GET\",\n    baseURL: Config.movieUrl,\n    url: Config.idm.search,\n    params: queryParams,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function searchMovie(queryParams, accessToken, movieId) {\n  const options = {\n    method: \"GET\",\n    baseURL: Config.movieUrl,\n    url: Config.idm.getMovie + movieId,\n    params: queryParams,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function insertCart(insertRequest, accessToken) {\n  const requestBody = {\n    movieId: insertRequest.movieId,\n    quantity: insertRequest.quantity\n  };\n  const options = {\n    method: \"POST\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.cartUrl,\n    url: Config.idm.insertCart,\n    data: requestBody,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function retrieveCart(queryParams, accessToken) {\n  const options = {\n    method: \"GET\",\n    baseURL: Config.cartUrl,\n    url: Config.idm.retrieveCart,\n    params: queryParams,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function cartUpdate(cartRequest, accessToken) {\n  const requestBody = {\n    movieId: cartRequest.movieId,\n    quantity: cartRequest.quantity\n  };\n  const options = {\n    method: \"POST\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.cartUrl,\n    url: Config.idm.updateCart,\n    data: requestBody,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function cartDelete(deleteRequest, accessToken) {\n  const requestBody = {\n    movieId: deleteRequest.movieId\n  };\n  const options = {\n    method: \"DELETE\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.cartUrl,\n    url: Config.idm.deleteCart,\n    data: requestBody,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}","map":{"version":3,"sources":["/Users/stevekim/Desktop/uci/cs122b/FE2-Search/src/backend/idm.js"],"names":["Config","Axios","login","loginRequest","requestBody","email","password","options","method","baseURL","baseUrl","url","idm","data","request","registerUser","registerRequest","register","searchMovies","queryParams","accessToken","movieUrl","search","params","headers","Authorization","searchMovie","movieId","getMovie","insertCart","insertRequest","quantity","cartUrl","retrieveCart","cartUpdate","cartRequest","updateCart","cartDelete","deleteRequest","deleteCart"],"mappings":"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","sourcesContent":["import Config from \"backend/config.json\";\nimport Axios from \"axios\";\n\n\n/**\n * We use axios to create REST calls to our backend\n *\n * We have provided the login rest call for your\n * reference to build other rest calls with.\n *\n * This is an async function. Which means calling this function requires that\n * you \"chain\" it with a .then() function call.\n * <br>\n * What this means is when the function is called it will essentially do it \"in\n * another thread\" and when the action is done being executed it will do\n * whatever the logic in your \".then()\" function you chained to it\n * @example\n * login(request)\n * .then(response => alert(JSON.stringify(response.data, null, 2)));\n */\nexport async function login(loginRequest) {\n    const requestBody = {\n        email: loginRequest.email,\n        password: loginRequest.password\n    };\n\n    const options = {\n        method: \"POST\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.baseUrl, // Base URL (localhost:8081 for example)\n        url: Config.idm.login, // Path of URL (\"/login\")\n        data: requestBody // Data to send in Body (The RequestBody to send)\n    }\n\n    return Axios.request(options);\n}\n\nexport async function registerUser(registerRequest) {\n    const requestBody = {\n        email: registerRequest.email,\n        password: registerRequest.password\n    };\n\n    const options = {\n        method: \"POST\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.baseUrl, // Base URL (localhost:8081 for example)\n        url: Config.idm.register, // Path of URL (\"/register\")\n        data: requestBody // Data to send in Body (The RequestBody to send)\n    };\n\n    return Axios.request(options);\n}\n\nexport async function searchMovies(queryParams, accessToken) {\n    const options = {\n        method: \"GET\",\n        baseURL: Config.movieUrl,\n        url: Config.idm.search,\n        params: queryParams,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}\n\nexport async function searchMovie(queryParams, accessToken, movieId) {\n    const options = {\n        method: \"GET\",\n        baseURL: Config.movieUrl,\n        url: Config.idm.getMovie + movieId,\n        params: queryParams,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}\n\nexport async function insertCart(insertRequest, accessToken) {\n    const requestBody = {\n        movieId: insertRequest.movieId,\n        quantity: insertRequest.quantity\n    };\n\n    const options = {\n        method: \"POST\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.cartUrl,\n        url: Config.idm.insertCart,\n        data: requestBody,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}\n\nexport async function retrieveCart(queryParams, accessToken) {\n    const options = {\n        method: \"GET\",\n        baseURL: Config.cartUrl,\n        url: Config.idm.retrieveCart,\n        params: queryParams,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}\n\nexport async function cartUpdate(cartRequest, accessToken) {\n    const requestBody = {\n        movieId: cartRequest.movieId,\n        quantity: cartRequest.quantity\n    };\n\n    const options = {\n        method: \"POST\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.cartUrl,\n        url: Config.idm.updateCart,\n        data: requestBody,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}\n\nexport async function cartDelete(deleteRequest, accessToken) {\n    const requestBody = {\n        movieId: deleteRequest.movieId\n    }\n\n    const options = {\n        method: \"DELETE\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.cartUrl,\n        url: Config.idm.deleteCart,\n        data: requestBody,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        }\n    };\n\n    return Axios.request(options);\n}"]},"metadata":{},"sourceType":"module"}