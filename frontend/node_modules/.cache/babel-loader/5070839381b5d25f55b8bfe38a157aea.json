{"ast":null,"code":"var _jsxFileName = \"/Users/stevekim/Desktop/uci/cs122b/FE2-Search/src/pages/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useUser } from \"hook/User\";\nimport { useForm } from \"react-hook-form\";\nimport { login } from \"backend/idm\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n_c = StyledDiv;\nconst StyledInput = styled.input`\n  border: none;\n  border-bottom: solid rgb(143, 143, 143) 1px;\n\n  margin-bottom: 30px;\n\n  background: none;\n  color: rgba(255, 255, 255, 0.555);\n\n  height: 35px;\n  width: 100%;\n  outline: none;\n`;\n_c2 = StyledInput;\nconst StyledButton = styled.button`\n  cursor: pointer;\n\n  border: none;\n  border-radius: 8px;\n\n  box-shadow: 2px 2px 7px #38d39f70;\n\n  background: #38d39f;\n  color: rgba(255, 255, 255, 0.8);\n\n  width: 100%;\n\n  padding: 20px;\n`;\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\n\n_c3 = StyledButton;\n\nconst Login = () => {\n  _s();\n\n  const {\n    accessToken,\n    setAccessToken,\n    refreshToken,\n    setRefreshToken\n  } = useUser();\n  const {\n    register,\n    getValues,\n    handleSubmit\n  } = useForm();\n  const navigate = useNavigate();\n\n  const submitLogin = () => {\n    const email = getValues(\"email\");\n    const password = getValues(\"password\");\n    const payLoad = {\n      email: email,\n      password: password.split('')\n    };\n    login(payLoad).then(response => {\n      alert(JSON.stringify(response.data, null, 2));\n      setAccessToken(response.data.accessToken);\n      navigate(\"/\");\n    }).catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"LOG IN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StyledDiv, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"subtitle\",\n        children: \"USERNAME:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledInput, { ...register(\"email\"),\n        type: \"email\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"subtitle\",\n        children: \"PASSWORD:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledInput, { ...register(\"password\"),\n        type: \"password\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        onClick: handleSubmit(submitLogin),\n        children: \"LOGIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"7w5aaWPDuTbYJq4jfpU1Xqv4HHQ=\", false, function () {\n  return [useUser, useForm, useNavigate];\n});\n\n_c4 = Login;\nexport default Login;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledDiv\");\n$RefreshReg$(_c2, \"StyledInput\");\n$RefreshReg$(_c3, \"StyledButton\");\n$RefreshReg$(_c4, \"Login\");","map":{"version":3,"sources":["/Users/stevekim/Desktop/uci/cs122b/FE2-Search/src/pages/Login.jsx"],"names":["React","styled","useUser","useForm","login","useNavigate","StyledDiv","div","StyledInput","input","StyledButton","button","Login","accessToken","setAccessToken","refreshToken","setRefreshToken","register","getValues","handleSubmit","navigate","submitLogin","email","password","payLoad","split","then","response","alert","JSON","stringify","data","catch","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {useUser} from \"hook/User\";\nimport {useForm} from \"react-hook-form\";\nimport {login} from \"backend/idm\";\nimport {useNavigate} from 'react-router-dom';\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledInput = styled.input`\n  border: none;\n  border-bottom: solid rgb(143, 143, 143) 1px;\n\n  margin-bottom: 30px;\n\n  background: none;\n  color: rgba(255, 255, 255, 0.555);\n\n  height: 35px;\n  width: 100%;\n  outline: none;\n`\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n\n  border: none;\n  border-radius: 8px;\n\n  box-shadow: 2px 2px 7px #38d39f70;\n\n  background: #38d39f;\n  color: rgba(255, 255, 255, 0.8);\n\n  width: 100%;\n\n  padding: 20px;\n`\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\nconst Login = () => {\n    const {\n        accessToken, setAccessToken,\n        refreshToken, setRefreshToken\n    } = useUser();\n\n    const {register, getValues, handleSubmit} = useForm();\n    const navigate = useNavigate();\n\n    const submitLogin = () => {\n        const email = getValues(\"email\");\n        const password = getValues(\"password\");\n\n        const payLoad = {\n            email: email,\n            password: password.split('')\n        }\n\n        login(payLoad)\n            .then(response => {\n                alert(JSON.stringify(response.data, null, 2));\n                setAccessToken(response.data.accessToken);\n                navigate(\"/\");\n            })\n            .catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n    }\n\n    return (\n        <div id=\"container\">\n            <div id=\"header\">\n                <h1>LOG IN</h1>\n            </div>\n\n            <StyledDiv>\n                <span className=\"subtitle\">USERNAME:</span>\n                <StyledInput {...register(\"email\")} type={\"email\"} autoComplete=\"off\"/>\n                <span className=\"subtitle\">PASSWORD:</span>\n                <StyledInput {...register(\"password\")} type={\"password\"} autoComplete=\"off\"/>\n                <StyledButton onClick={handleSubmit(submitLogin)}>LOGIN</StyledButton>\n            </StyledDiv>\n        </div>\n    );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}