{"ast":null,"code":"var _jsxFileName = \"/Users/stevekim/Desktop/uci/cs122b/FE2-Search/src/pages/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useUser } from \"hook/User\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport Idm from \"backend/idm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n_c = StyledDiv;\nconst StyledH1 = styled.h1`\n`;\nconst StyledInput = styled.input`\n`;\nconst StyledButton = styled.button`\n`;\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\n\nconst Login = () => {\n  _s();\n\n  const {\n    accessToken,\n    setAccessToken,\n    refreshToken,\n    setRefreshToken\n  } = useUser();\n  const {\n    register,\n    getValues,\n    handleSubmit\n  } = useForm();\n\n  const submitLogin = () => {\n    const email = getValues(\"email\");\n    const password = getValues(\"password\");\n    const payLoad = {\n      email: email,\n      password: password.split('')\n    };\n    Idm.login(payLoad).then(response => alert(JSON.stringify(response.data, null, 2))).catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\"),\n      type: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\"),\n      type: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit(submitLogin),\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"Eq2bgyTSAqyk2jwEeIRlJN/h/5Y=\", false, function () {\n  return [useUser, useForm];\n});\n\n_c2 = Login;\nexport default Login;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledDiv\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["/Users/stevekim/Desktop/uci/cs122b/FE2-Search/src/pages/Login.jsx"],"names":["React","useUser","styled","useForm","Idm","StyledDiv","div","StyledH1","h1","StyledInput","input","StyledButton","button","Login","accessToken","setAccessToken","refreshToken","setRefreshToken","register","getValues","handleSubmit","submitLogin","email","password","payLoad","split","login","then","response","alert","JSON","stringify","data","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAGA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA;AACA,CAHA;KAAMD,S;AAKN,MAAME,QAAQ,GAAGL,MAAM,CAACM,EAAG;AAC3B,CADA;AAGA,MAAMC,WAAW,GAAGP,MAAM,CAACQ,KAAM;AACjC,CADA;AAGA,MAAMC,YAAY,GAAGT,MAAM,CAACU,MAAO;AACnC,CADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM;AACFC,IAAAA,WADE;AACWC,IAAAA,cADX;AAEFC,IAAAA,YAFE;AAEYC,IAAAA;AAFZ,MAGFhB,OAAO,EAHX;AAMA,QAAM;AAACiB,IAAAA,QAAD;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAsCjB,OAAO,EAAnD;;AAEA,QAAMkB,WAAW,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAGH,SAAS,CAAC,OAAD,CAAvB;AACA,UAAMI,QAAQ,GAAGJ,SAAS,CAAC,UAAD,CAA1B;AAEA,UAAMK,OAAO,GAAG;AACZF,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,QAAQ,EAAEA,QAAQ,CAACE,KAAT,CAAe,EAAf;AAFE,KAAhB;AAKArB,IAAAA,GAAG,CAACsB,KAAJ,CAAUF,OAAV,EACKG,IADL,CACUC,QAAQ,IAAIC,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAxB,EAA8B,IAA9B,EAAoC,CAApC,CAAD,CAD3B,EAEKC,KAFL,CAEWC,KAAK,IAAIL,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeG,KAAK,CAACN,QAAN,CAAeI,IAA9B,EAAoC,IAApC,EAA0C,CAA1C,CAAD,CAFzB;AAGH,GAZD;;AAcA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,sBAAWd,QAAQ,CAAC,OAAD,CAAnB;AAA8B,MAAA,IAAI,EAAE;AAApC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,sBAAWA,QAAQ,CAAC,UAAD,CAAnB;AAAiC,MAAA,IAAI,EAAE;AAAvC;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEE,YAAY,CAACC,WAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA/BD;;GAAMR,K;UAIEZ,O,EAGwCE,O;;;MAP1CU,K;AAiCN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport {useUser} from \"hook/User\";\nimport styled from \"styled-components\";\nimport {useForm} from \"react-hook-form\";\nimport Idm from \"backend/idm\";\n\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledH1 = styled.h1`\n`\n\nconst StyledInput = styled.input`\n`\n\nconst StyledButton = styled.button`\n`\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\nconst Login = () => {\n    const {\n        accessToken, setAccessToken,\n        refreshToken, setRefreshToken\n    } = useUser();\n\n\n    const {register, getValues, handleSubmit} = useForm();\n\n    const submitLogin = () => {\n        const email = getValues(\"email\");\n        const password = getValues(\"password\");\n\n        const payLoad = {\n            email: email,\n            password: password.split('')\n        }\n\n        Idm.login(payLoad)\n            .then(response => alert(JSON.stringify(response.data, null, 2)))\n            .catch(error => alert(JSON.stringify(error.response.data, null, 2)))\n    }\n\n    return (\n        <StyledDiv>\n            <h1>Login</h1>\n            <input {...register(\"email\")} type={\"email\"}/>\n            <input {...register(\"password\")} type={\"password\"}/>\n            <button onClick={handleSubmit(submitLogin)}>Login</button>\n        </StyledDiv>\n    );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}